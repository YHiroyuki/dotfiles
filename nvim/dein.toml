# ステータスバーのカスタマイズ
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-gitgutter', 'vim-fugitive', 'gruvbox']
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly', 'filename', 'modified'],
  \     ['fugitive', 'gitgutter']
  \   ],
  \   'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype']]
  \ },
  \ 'separator': {
  \   'left': '⮀',
  \ },
  \ 'subseparator': {
  \   'left': '',
  \ },
  \ 'component_function': {
  \   'fugitive': 'MyLightlineFugitive',
  \   'modified': 'MyLightlineModified',
  \   'readonly': 'MyLightlineReadonly',
  \   'gitgutter': 'MyLightlineGitGutter',
  \   'fileformat': 'MyFileFormat',
  \   'fileencoding': 'MyFileEncoding',
  \   'filetype': 'MyLightlineFileType',
  \ },
  \ }

function! MyLightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? ' ' : &modifiable ? '' : '-'
endfunction

function! MyLightlineReadonly()
  return &readonly && &filetype !=# 'help' ? '' : ''
endfunction

function! MyLightlineFugitive()
  if &filetype =~ 'defx'
    return ''
  endif

  try
    if &ft !~? 'vimfiler\|gundo' && strlen(fugitive#head())
      return ' ' . fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! MyLightlineGitGutter()
  if &filetype =~ 'defx'
    return ''
  endif
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

function! MyFileFormat()
  return &filetype =~ 'defx' ? '' : &fileformat
endfunction

function! MyFileEncoding()
  return &filetype =~ 'defx' ? '' : &fileencoding
endfunction

function! MyLightlineFileType()
  return &filetype =~ 'defx' ? '' : (strlen(&filetype) ? &filetype : 'no ft')
endfunction
'''

# インデントの表示
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'vimfiler']
  let g:indentLine_char = '¦'
'''

# markdownプレビュー用
[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

# 単語検索
[[plugins]]
repo = 'mileszs/ack.vim'

# 整形
[[plugins]]
repo = 'h1mesuke/vim-alignta'

# コーディングスタイル調整
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# Git関連
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  set updatetime=500
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➜'
  let g:gitgutter_sign_modified_removed = '✘➜'
  let g:gitgutter_sign_removed = '✘'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

# Go言語用
[[plugins]]
repo = 'fatih/vim-go'
[[plugins]]
repo = 'vim-jp/vim-go-extra'

# tomlファイル
[[plugins]]
repo = 'cespare/vim-toml'

# アイコン
[[plugins]]
repo = 'ryanoasis/vim-devicons'
[[plugins]]
repo = 'kristijanhusak/defx-icons'
[[plugins]]
repo = 'kristijanhusak/defx-git'

# [[plugins]]
# repo = 'mechatroner/rainbow_csv'
# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# [[plugins]]
# repo = 'prabirshrestha/async'
# # deopleteに移管できるかも
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete'
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp'
# [[plugins]]
# repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'elzr/vim-json'

[[plugins]]
repo = 'Shougo/pum.vim'

# 翻訳
[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
  let g:translate_source = "en"
  let g:translate_target = "ja"
  let g:translate_popup_window = 0
  let g:translate_winsize = 3
'''
